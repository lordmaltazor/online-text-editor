{"version":3,"sources":["index.js","App.js","Editor.js"],"names":["ReactDOM","render","StrictMode","document","getElementById","App","filenameInput","useRef","useState","code","setCode","filename","setFilename","output","setOutput","error","setError","downloadFile","downloadAsFile","data","current","value","alert","runCode","eval","err","name","message","help","className","type","onChange","e","target","ref","onClick","window","open","style","color","Editor","onBeforeChange","editor","options","mode","theme","fontSize","lint","lineNumbers","lineWrapping"],"mappings":"iHAAA,yDAIAA,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,MAEFC,SAASC,eAAe,U,0hCCH1B,SAASC,MACL,IAAMC,cAAgBC,kDAAO,MADlB,UAGaC,oDAAS,IAHtB,6LAGJC,KAHI,cAGEC,QAHF,yBAIqBF,oDAAS,IAJ9B,8LAIJG,SAJI,cAIMC,YAJN,yBAMiBJ,oDAAS,IAN1B,8LAMJK,OANI,cAMIC,UANJ,yBAOeN,qDAAS,GAPxB,8LAOJO,MAPI,cAOGC,SAPH,cASLC,aAAe,WACJ,KAATR,KAKkB,KAAbE,UAMTO,wDAAe,CACXC,KAAMV,KACNE,SAAS,GAAD,OAAKA,SAAL,SAGZL,cAAcc,QAAQC,MAAQ,IAV1BC,MAAM,8CALNA,MAAM,sEAkBRC,QAAU,SAAVA,UACF,GAAa,KAATd,KAMJ,IACIK,UAAUU,KAAKf,OACfO,UAAS,GAEb,MAAOS,KAGHX,UAAU,GAAD,OAAIW,IAAIC,KAAR,aAAiBD,IAAIE,UAC9BX,UAAS,QAbTM,MAAM,gEAiBRM,KAAO,WACTN,MAAM,uMAGV,OACI,mEAAKO,UAAU,MAAf,UACI,gFACI,gEAAGA,UAAU,YAAb,wBACA,oEAAOC,KAAK,OAAOC,SAAU,SAACC,GAAD,OAAOpB,YAAYoB,EAAEC,OAAOZ,QAAQa,IAAK5B,gBAEtE,qEAAQuB,UAAU,gBAAgBM,QAASlB,aAA3C,2BACA,qEAAQY,UAAU,gBAAgBM,QAAS,kBAAMC,OAAOC,KAAK,qDAAsD,WAAnH,oBACA,qEAAQR,UAAU,gBAAgBM,QAASP,KAA3C,kBACA,qEAAQC,UAAU,gBAAgBM,QAASZ,QAA3C,oBAGJ,uEAASM,UAAU,eAAnB,UAEI,2DAAC,uCAAD,CAAQR,MAAOZ,KAAMsB,SAAUrB,UAE/B,kEAAKmB,UAAU,SAASS,MAAO,CAAEC,MAAOxB,MAAQ,MAAQ,SAAxD,SAAoEF,eAMrER,2B,+BC/Ef,4EAMe,SAASmC,EAAT,GAAsC,IAApBnB,EAAmB,EAAnBA,MAAOU,EAAY,EAAZA,SAKpC,OACI,qBAAKF,UAAU,mBAAf,SACI,cAAC,aAAD,CACIA,UAAU,SACVR,MAAOA,EACPoB,eATS,SAACC,EAAQvB,EAAME,GAChCU,EAASV,IASDsB,QAAS,CACLC,KAAM,aACNC,MAAO,WACPC,SAAU,GACVC,MAAM,EACNC,aAAa,EACbC,cAAc,U","file":"static/js/main.fe72c24c.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import React, { useState, useRef } from 'react';\nimport './App.css';\nimport downloadAsFile from 'download-as-file';\nimport Editor from './Editor';\n\nfunction App() {\n    const filenameInput = useRef(null);\n\n    const [code, setCode] = useState('');\n    const [filename, setFilename] = useState('');\n\n    const [output, setOutput] = useState(''); // The output of the users code\n    const [error, setError] = useState(false); // Whether or not the was an error in the user's code\n\n    const downloadFile = () => {\n        if (code === '') {\n            alert(\"Type something in the code editor before downloading your script!\");\n\n            return;\n        }\n        else if (filename === '') {\n            alert(\"You have to choose a name for your script!\");\n\n            return;\n        }\n\n        downloadAsFile({\n            data: code,\n            filename: `${filename}.js`\n        })\n\n        filenameInput.current.value = '';\n    }\n\n    const runCode = () => {\n        if (code === '') {\n            alert(\"Type something in the code editor before running your code!\");\n\n            return;\n        }\n\n        try {\n            setOutput(eval(code));\n            setError(false);\n        }\n        catch (err) {\n            //console.log(err);\n\n            setOutput(`${err.name}: ${err.message}`);\n            setError(true);\n        }\n    }\n\n    const help = () => {\n        alert(\"Just type your Javascript in the editor, and you will see the output in the panel to the right. When you're done with the code, you can choose a file name and download the script if you want to.\");\n    }\n\n    return (\n        <div className=\"app\">\n            <header>\n                <p className=\"file-name\">Filename: </p>\n                <input type=\"text\" onChange={(e) => setFilename(e.target.value)} ref={filenameInput} />\n\n                <button className=\"header-button\" onClick={downloadFile}>Download File</button>\n                <button className=\"header-button\" onClick={() => window.open('https://github.com/lordmaltazor/online-text-editor', '_blank')}>Github</button>\n                <button className=\"header-button\" onClick={help}>Help</button>\n                <button className=\"header-button\" onClick={runCode}>Run</button>\n            </header>\n\n            <section className=\"main-section\">\n                {/*<textarea onChange={updateCode} placeholder=\"Type your Javascript code here!\" spellCheck=\"false\"></textarea>*/}\n                <Editor value={code} onChange={setCode} />\n\n                <div className=\"output\" style={{ color: error ? \"red\" : 'white' }}>{output}</div>\n            </section>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/theme/material.css';\r\nimport 'codemirror/mode/javascript/javascript';\r\nimport { Controlled as ControlledEditor } from 'react-codemirror2';\r\n\r\nexport default function Editor({ value, onChange }) {\r\n    const handleChange = (editor, data, value) => {\r\n        onChange(value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"editor-container\">\r\n            <ControlledEditor\r\n                className=\"editor\"\r\n                value={value}\r\n                onBeforeChange={handleChange}\r\n                options={{\r\n                    mode: 'javascript',\r\n                    theme: 'material',\r\n                    fontSize: 20,\r\n                    lint: true,\r\n                    lineNumbers: true,\r\n                    lineWrapping: true\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n"],"sourceRoot":""}