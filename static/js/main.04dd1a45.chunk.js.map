{"version":3,"sources":["comps/CloseButton.js","App.js","comps/Tab.js","comps/Editor.js","FileTypes.js","OpenFileOptions.js","DefaultPreview.js","index.js"],"names":["CloseButton","onClick","className","App","iframe","useRef","useState","output","setOutput","error","setError","showConsole","setShowConsole","showWebsitePreview","setShowWebsitePreview","help","setHelp","settingsMenu","setSettingsMenu","fontSize","setFontSize","root","document","querySelector","style","setProperty","TabClass","code","fileHandler","fileName","fileExtension","fileType","language","modified","this","tabs","setTabs","currentTab","setCurrentTab","html","find","tab","css","javascript","srcDoc","setSrcDoc","useEffect","timeout","setTimeout","undefined","defaultPreview","clearTimeout","updateCode","value","arr","getNewTab","handler","extension","name","split","fileTypes","object","fileTypeName","fileLanguage","closeTab","index","splice","newFile","a","length","openFile","window","showOpenFilePicker","openFileOptions","files","getFile","file","text","saveFile","createWritable","writable","blob","Blob","write","close","showSaveFilePicker","runCode","eval","err","message","alert","open","map","isCurrent","isLast","onChange","color","title","ref","sandbox","frameBorder","allowFullScreen","webkitallowfullscreen","width","height","current","requestFullscreen","onInput","e","target","type","min","max","Tab","background","borderBottom","Editor","editor","onBeforeChange","data","options","mode","theme","lint","lineNumbers","lineWrapping","types","description","accept","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.04dd1a45.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function CloseButton({ onClick }) {\r\n    return (\r\n        <button className=\"close-button\" onClick={onClick}><i className=\"fas fa-times\"></i></button>\r\n    )\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport Tab from './comps/Tab';\nimport Editor from './comps/Editor';\nimport fileTypes from './FileTypes';\nimport openFileOptions from './OpenFileOptions';\nimport defaultPreview from './DefaultPreview';\nimport CloseButton from './comps/CloseButton';\n\nfunction App() {\n    const iframe = useRef(null);\n\n    const [output, setOutput] = useState(''); // The output of the users code\n    const [error, setError] = useState(false); // Whether or not the was an error in the user's code\n\n    const [showConsole, setShowConsole] = useState(false); // Whether or not the output box is shown\n    const [showWebsitePreview, setShowWebsitePreview] = useState(false); // Whether or not the website preview is shown\n\n    const [help, setHelp] = useState(false); // Whether or not the help modal is up or not\n\n    const [settingsMenu, setSettingsMenu] = useState(false);\n\n    const [fontSize, setFontSize] = useState(30);\n\n    const root = document.querySelector(':root');\n    root.style.setProperty('--editor-font-size', `${fontSize}px`);\n\n    class TabClass {\n        constructor(code, fileHandler, fileName, fileExtension, fileType, language, modified) {\n            this.code = code;\n            this.fileHandler = fileHandler;\n            this.fileName = fileName;\n            this.fileExtension = fileExtension;\n            this.fileType = fileType;\n            this.language = language;\n            this.modified = modified;\n        }\n    }\n\n    const [tabs, setTabs] = useState([new TabClass('', null, 'untitled', '', '', 'text')]);\n    const [currentTab, setCurrentTab] = useState(0); // The index of the tab the user is currently on\n\n    const html = tabs.find(tab => tab.fileExtension === '.html')?.code;\n    const css = tabs.find(tab => tab.fileExtension === '.css')?.code;\n    const javascript = tabs.find(tab => tab.fileExtension === '.js')?.code;\n\n    const [srcDoc, setSrcDoc] = useState('');\n\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            if (html !== undefined) {\n                setSrcDoc(`\n                    <html>\n                        <body>${html || ''}</body>\n                        <style>${css || ''}</style>\n                        <script>${javascript || ''}</script>\n                    </html>\n                `);\n            }\n            else {\n                setSrcDoc(defaultPreview);\n            }\n        }, 250)\n\n        return () => clearTimeout(timeout);\n    }, [html, css, javascript])\n\n    const updateCode = (value) => {\n        const arr = tabs;\n\n        arr[currentTab].code = value;\n        arr[currentTab].modified = true;\n\n        setTabs([...arr]);\n    }\n\n    // This is ran when we create a new file handler, like opening a file or clicking 'save as'\n    const getNewTab = (code, handler) => {\n        const extension = '.' + handler.name.split('.')[1];\n\n        const fileType = fileTypes.find((object) => object.extension === extension);\n        const fileTypeName = fileType.name;\n        const fileLanguage = fileType.language;\n\n        if (extension === '.html') {\n            setShowWebsitePreview(true);\n        }\n\n        return (new TabClass(code, handler, handler.name, extension, fileTypeName, fileLanguage));\n    }\n\n    const closeTab = (index) => {\n        const arr = tabs;\n\n        arr.splice(index, 1);\n\n        setCurrentTab(0);\n\n        setTabs([...arr]);\n    }\n\n    const newFile = async () => {\n        setTabs([...tabs, new TabClass('', null, 'untitled', '', '', 'text')]);\n\n        setCurrentTab(tabs.length);\n    }\n\n    const openFile = async () => {\n        const files = await window.showOpenFilePicker(openFileOptions);\n        const file = await files[0].getFile();\n        const text = await file.text();\n\n        setTabs([...tabs, getNewTab(text, files[0])]);\n\n        setCurrentTab(tabs.length);\n    }\n\n    const saveFile = async () => {\n        const arr = tabs;\n\n        arr[currentTab].modified = false;\n\n        setTabs([...arr]);\n\n        // If there is a file handler (i.e we have already saved a file) we just update that file,\n        // If not we make a new 'save as' prompt\n        if (tabs[currentTab].fileHandler) {\n            // Save\n            const writable = await tabs[currentTab].fileHandler.createWritable(); // Create a new writable stream\n\n            const blob = new Blob([tabs[currentTab].code]);\n\n            await writable.write(blob);\n\n            await writable.close();\n        }\n        else {\n            // Save as\n            const handler = await window.showSaveFilePicker();\n            const writable = await handler.createWritable();\n\n            await writable.write(tabs[currentTab].code);\n\n            await writable.close();\n\n            const arr = tabs;\n\n            arr[currentTab] = getNewTab(tabs[currentTab].code, handler);\n\n            setTabs([...arr]);\n        }\n    }\n\n    const runCode = () => {\n        if (tabs[currentTab].fileExtension !== '.js') {\n            alert(`Sorry, you can only run Javascript files! This is a ${tabs[currentTab].fileType || 'Text file'}`);\n\n            return;\n        }\n        else if (tabs[currentTab].code === '') {\n            alert(\"Type something in the code editor before running your code!\");\n\n            return;\n        }\n\n        setShowConsole(true);\n\n        try {\n            setOutput(eval(tabs[currentTab].code));\n            setError(false);\n        }\n        catch (err) {\n            //console.log(err);\n\n            setOutput(`${err.name}: ${err.message}`);\n            setError(true);\n        }\n    }\n\n    return (\n        <div className=\"app\">\n            <header>\n                <button className=\"button header-button file-dropdown-button\">\n                    <p>File</p>\n                    <div className=\"file-dropdown\">\n                        <button className=\"button header-button file-dropdown-item\" onClick={newFile}>New File</button>\n                        <button className=\"button header-button file-dropdown-item\" onClick={openFile}>Open File</button>\n                        <button className=\"button header-button file-dropdown-item\" onClick={saveFile}>Save{!tabs[currentTab].fileHandler && ' As'}</button>\n                    </div>\n                </button>\n\n                <button className=\"button header-button\" onClick={() => window.open('https://github.com/lordmaltazor/online-text-editor', '_blank')}>Github</button>\n                <button className=\"button header-button\" onClick={() => setHelp(true)}>Help</button>\n                <button className=\"button header-button\" onClick={() => setSettingsMenu(true)}>Settings</button>\n                <button className=\"button header-button\" onClick={runCode}>Run</button>\n                <div className=\"header-spacer\"></div>\n                <button className=\"button header-button\" onClick={() => setShowConsole(!showConsole)}>{showConsole ? 'Hide' : 'Show'} console</button>\n            </header>\n\n            <div className=\"tabs\">\n                {tabs.map((tab, index) => <Tab key={index} name={tab.fileName} onClick={() => tabs[index] && setCurrentTab(index)} close={() => closeTab(index)} isCurrent={currentTab === index} isLast={tabs.length > 1} modified={tab.modified} />)}\n            </div>\n\n            <section className=\"main-section\">\n                <div className=\"horizontal-main-section\">\n                    <Editor value={tabs[currentTab].code} onChange={(value) => updateCode(value)} language={tabs[currentTab].language} />\n\n                    {showConsole && <div className=\"console\" style={{ color: error ? \"red\" : 'white' }}>\n                        <p className=\"console-text\">Output:</p>\n                        {output}\n                    </div>}\n                </div>\n\n                {showWebsitePreview && <div className=\"website-preview\">\n                    <iframe\n                        title=\"output\"\n                        srcDoc={srcDoc}\n                        ref={iframe}\n                        sandbox=\"allow-scripts\"\n                        frameBorder=\"0\"\n                        allowFullScreen\n                        webkitallowfullscreen\n                        width=\"100%\"\n                        height=\"100%\"\n                    />\n                </div>}\n            </section>\n\n            <div className=\"status-bar\">\n                <p className=\"current-file\">{tabs[currentTab].fileName} {tabs[currentTab].fileName && '|'} {tabs[currentTab].fileType || 'Text file'}</p>\n                <div className=\"status-bar-spacer\"></div>\n                <button className=\"button toggle-iframe-button\" onClick={() => iframe.current.requestFullscreen()}>Go fullscreen</button>\n                <button className=\"button toggle-iframe-button\" onClick={() => setShowWebsitePreview(!showWebsitePreview)}>{showWebsitePreview ? 'Hide preview' : 'Show preview'}</button>\n            </div>\n\n            {help && <div className=\"black-overlay\">\n                <div className=\"help-modal\">\n                    <p className=\"help-modal-title\">Help</p>\n                    <CloseButton onClick={() => setHelp(false)} />\n\n                    <p className=\"help\">Just type your Javascript in the editor, and you will see the output in the panel to the right. When you're done with the code, you can choose a file name and download the script if you want to.</p>\n                </div>\n            </div>}\n\n            {settingsMenu && <div className=\"black-overlay\">\n                <div className=\"settings-menu\">\n                    <p className=\"settings-menu-title\">Settings</p>\n                    <CloseButton onClick={() => setSettingsMenu(false)} />\n\n                    <p className=\"setting-text\">Text size: {fontSize}</p>\n                    <input className=\"slider\" value={fontSize} onInput={(e) => setFontSize(e.target.value)} type=\"range\" min=\"15\" max=\"50\" />\n                </div>\n            </div>}\n        </div >\n    );\n}\n\nexport default App;\n","import React from 'react'\r\n\r\nexport default function Tab({ name, onClick, close, isCurrent, isLast, modified }) {\r\n    return (\r\n        <button className=\"tab\" onClick={onClick} style={{ background: !isCurrent && 'transparent', borderBottom: modified && '5px solid gray' }}>\r\n            <p className=\"tab-name\">{name}</p>\r\n            {isLast && <button className=\"close-tab-button\" onClick={close}><i className=\"fas fa-times\"></i></button>}\r\n        </button>\r\n    )\r\n}\r\n","import React, { useRef } from 'react';\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/theme/material.css';\r\nimport 'codemirror/mode/xml/xml';\r\nimport 'codemirror/mode/css/css';\r\nimport 'codemirror/mode/javascript/javascript';\r\nimport { Controlled as ControlledEditor } from 'react-codemirror2';\r\n\r\nexport default function Editor({ value, onChange, language }) {\r\n    const editor = useRef(null);\r\n\r\n    const handleChange = (editor, data, value) => {\r\n        onChange(value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"editor-container\">\r\n            <ControlledEditor\r\n                className=\"editor\"\r\n                value={value}\r\n                ref={editor}\r\n                onBeforeChange={handleChange}\r\n                options={{\r\n                    mode: language === 'text' ? null : language,\r\n                    theme: 'material',\r\n                    lint: true,\r\n                    lineNumbers: language !== 'text',\r\n                    lineWrapping: true\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","// The \"name\" is displayed in the statusbar and such, \r\n// \"extension\" is used for getting the language of a new file \r\n// And \"language\" is used for the CodeMirror editor linting\r\n\r\nconst fileTypes = [\r\n    {\r\n        name: 'Text file',\r\n        extension: '.txt',\r\n        language: 'text'\r\n    },\r\n    {\r\n        name: 'HTML file',\r\n        extension: '.html',\r\n        language: 'xml'\r\n    },\r\n    {\r\n        name: 'CSS file',\r\n        extension: '.css',\r\n        language: 'css'\r\n    },\r\n    {\r\n        name: 'Javascript file',\r\n        extension: '.js',\r\n        language: 'javascript'\r\n    },\r\n];\r\n\r\nexport default fileTypes;","// These are the files that are accepted when you click the \"open file\" button\r\n\r\nconst openFileOptions = {\r\n    types: [ // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\r\n        {\r\n            description: 'Text files',\r\n            accept: {\r\n                'text/plain': ['.txt'],\r\n            },\r\n        },\r\n        {\r\n            description: 'HTML files',\r\n            accept: {\r\n                'text/html': ['.js'],\r\n            },\r\n        },\r\n        {\r\n            description: 'CSS files',\r\n            accept: {\r\n                'text/css': ['.js'],\r\n            },\r\n        },\r\n        {\r\n            description: 'Javascript files',\r\n            accept: {\r\n                'text/javascript': ['.js'],\r\n            },\r\n        },\r\n    ]\r\n};\r\n\r\nexport default openFileOptions;","const defaultPreview = `\r\n    <html>\r\n    <body><p>\r\n        You have to have an HTML file open for the website preview to work! \r\n        Click the \"File\" button in the navigation-bar and \"Save As\". \r\n        Then save it somewhere on your computer as an HTML file \r\n    </p></body>            \r\n    <style>\r\n        html, body\r\n        {\r\n            height: 100%;\r\n        }\r\n        \r\n        body\r\n        {\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n        }\r\n        \r\n        p\r\n        {\r\n            width: 50%;\r\n            font-size: 30px;\r\n            font-family: sans-serif;\r\n            text-align: center;\r\n        }\r\n    </style>\r\n    </html>\r\n`;\r\n\r\nexport default defaultPreview;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}