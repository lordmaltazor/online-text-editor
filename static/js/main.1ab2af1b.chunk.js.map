{"version":3,"sources":["comps/CloseButton.js","App.js","comps/Tab.js","comps/Editor.js","FileTypes.js","OpenFileOptions.js","DefaultPreview.js","index.js"],"names":["CloseButton","onClick","className","App","iframe","useRef","useState","output","setOutput","error","setError","showConsole","setShowConsole","showWebsitePreview","setShowWebsitePreview","help","setHelp","settingsMenu","setSettingsMenu","localStorage","getItem","fontSize","setFontSize","editorTheme","setEditorTheme","root","document","querySelector","style","setProperty","console","log","TabClass","code","fileHandler","fileName","fileExtension","fileType","language","modified","this","tabs","setTabs","currentTab","setCurrentTab","html","find","tab","css","javascript","srcDoc","setSrcDoc","useEffect","setItem","timeout","setTimeout","undefined","defaultPreview","clearTimeout","updateCode","value","arr","getNewTab","handler","extension","name","split","fileTypes","object","fileTypeName","fileLanguage","closeTab","index","splice","newFile","a","length","openFile","window","showOpenFilePicker","openFileOptions","files","getFile","file","text","saveFile","createWritable","writable","blob","Blob","write","close","showSaveFilePicker","runCode","eval","err","message","alert","open","map","isCurrent","isLast","onChange","theme","color","title","ref","sandbox","frameBorder","width","height","current","requestFullscreen","onInput","e","target","type","min","max","Tab","background","borderBottom","Editor","editor","onBeforeChange","data","options","mode","lint","lineNumbers","lineWrapping","types","description","accept","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1ab2af1b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function CloseButton({ onClick }) {\r\n    return (\r\n        <button className=\"close-button\" onClick={onClick}><i className=\"fas fa-times\"></i></button>\r\n    )\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport Tab from './comps/Tab';\nimport Editor from './comps/Editor';\nimport fileTypes from './FileTypes';\nimport openFileOptions from './OpenFileOptions';\nimport defaultPreview from './DefaultPreview';\nimport CloseButton from './comps/CloseButton';\n\nfunction App() {\n    const iframe = useRef(null);\n\n    const [output, setOutput] = useState(''); // The output of the users code\n    const [error, setError] = useState(false); // Whether or not the was an error in the user's code\n\n    const [showConsole, setShowConsole] = useState(false); // Whether or not the output box is shown\n    const [showWebsitePreview, setShowWebsitePreview] = useState(false); // Whether or not the website preview is shown\n\n    const [help, setHelp] = useState(false); // Whether or not the help modal is up or not\n\n    const [settingsMenu, setSettingsMenu] = useState(false);\n\n    // Settings\n    const [fontSize, setFontSize] = useState(localStorage.getItem('fontSize') || 22);\n    const [editorTheme, setEditorTheme] = useState(localStorage.getItem('editorTheme') || 'material');\n\n    const root = document.querySelector(':root');\n    root.style.setProperty('--editor-font-size', `${fontSize}px`);\n\n    console.log(editorTheme);\n\n    class TabClass {\n        constructor(code, fileHandler, fileName, fileExtension, fileType, language, modified) {\n            this.code = code;\n            this.fileHandler = fileHandler;\n            this.fileName = fileName;\n            this.fileExtension = fileExtension;\n            this.fileType = fileType;\n            this.language = language;\n            this.modified = modified;\n        }\n    }\n\n    const [tabs, setTabs] = useState([new TabClass('', null, 'untitled', '', '', 'text')]);\n    const [currentTab, setCurrentTab] = useState(0); // The index of the tab the user is currently on\n\n    const html = tabs.find(tab => tab.fileExtension === '.html')?.code;\n    const css = tabs.find(tab => tab.fileExtension === '.css')?.code;\n    const javascript = tabs.find(tab => tab.fileExtension === '.js')?.code;\n\n    const [srcDoc, setSrcDoc] = useState('');\n\n    useEffect(() => {\n        localStorage.setItem('fontSize', fontSize);\n        localStorage.setItem('editorTheme', editorTheme);\n    }, [fontSize, editorTheme])\n\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            if (html !== undefined) {\n                setSrcDoc(`\n                    <html>\n                        <body>${html || ''}</body>\n                        <style>${css || ''}</style>\n                        <script>${javascript || ''}</script>\n                    </html>\n                `);\n            }\n            else {\n                setSrcDoc(defaultPreview);\n            }\n        }, 250)\n\n        return () => clearTimeout(timeout);\n    }, [html, css, javascript])\n\n    const updateCode = (value) => {\n        const arr = tabs;\n\n        arr[currentTab].code = value;\n        arr[currentTab].modified = true;\n\n        setTabs([...arr]);\n    }\n\n    // This is ran when we create a new file handler, like opening a file or clicking 'save as'\n    const getNewTab = (code, handler) => {\n        const extension = '.' + handler.name.split('.')[1];\n\n        const fileType = fileTypes.find((object) => object.extension === extension);\n        const fileTypeName = fileType.name;\n        const fileLanguage = fileType.language;\n\n        if (extension === '.html') {\n            setShowWebsitePreview(true);\n        }\n\n        return (new TabClass(code, handler, handler.name, extension, fileTypeName, fileLanguage));\n    }\n\n    const closeTab = (index) => {\n        const arr = tabs;\n\n        arr.splice(index, 1);\n\n        setCurrentTab(0);\n\n        setTabs([...arr]);\n    }\n\n    const newFile = async () => {\n        setTabs([...tabs, new TabClass('', null, 'untitled', '', '', 'text')]);\n\n        setCurrentTab(tabs.length);\n    }\n\n    const openFile = async () => {\n        const files = await window.showOpenFilePicker(openFileOptions);\n        const file = await files[0].getFile();\n        const text = await file.text();\n\n        setTabs([...tabs, getNewTab(text, files[0])]);\n\n        setCurrentTab(tabs.length);\n    }\n\n    const saveFile = async () => {\n        const arr = tabs;\n\n        arr[currentTab].modified = false;\n\n        setTabs([...arr]);\n\n        // If there is a file handler (i.e we have already saved a file) we just update that file,\n        // If not we make a new 'save as' prompt\n        if (tabs[currentTab].fileHandler) {\n            // Save\n            const writable = await tabs[currentTab].fileHandler.createWritable(); // Create a new writable stream\n\n            const blob = new Blob([tabs[currentTab].code]);\n\n            await writable.write(blob);\n\n            await writable.close();\n        }\n        else {\n            // Save as\n            const handler = await window.showSaveFilePicker();\n            const writable = await handler.createWritable();\n\n            await writable.write(tabs[currentTab].code);\n\n            await writable.close();\n\n            const arr = tabs;\n\n            arr[currentTab] = getNewTab(tabs[currentTab].code, handler);\n\n            setTabs([...arr]);\n        }\n    }\n\n    const runCode = () => {\n        if (tabs[currentTab].fileExtension !== '.js') {\n            alert(`Sorry, you can only run Javascript files! This is a ${tabs[currentTab].fileType || 'Text file'}`);\n\n            return;\n        }\n        else if (tabs[currentTab].code === '') {\n            alert(\"Type something in the code editor before running your code!\");\n\n            return;\n        }\n\n        setShowConsole(true);\n\n        try {\n            setOutput(eval(tabs[currentTab].code));\n            setError(false);\n        }\n        catch (err) {\n            //console.log(err);\n\n            setOutput(`${err.name}: ${err.message}`);\n            setError(true);\n        }\n    }\n\n    return (\n        <div className=\"app\">\n            <header>\n                <button className=\"button header-button file-dropdown-button\">\n                    <p>File</p>\n                    <div className=\"file-dropdown\">\n                        <button className=\"button header-button file-dropdown-item\" onClick={newFile}>New File</button>\n                        <button className=\"button header-button file-dropdown-item\" onClick={openFile}>Open File</button>\n                        <button className=\"button header-button file-dropdown-item\" onClick={saveFile}>Save{!tabs[currentTab].fileHandler && ' As'}</button>\n                    </div>\n                </button>\n\n                <button className=\"button header-button\" onClick={() => window.open('https://github.com/lordmaltazor/online-text-editor', '_blank')}>Github</button>\n                <button className=\"button header-button\" onClick={() => setHelp(true)}>Help</button>\n                <button className=\"button header-button\" onClick={() => setSettingsMenu(true)}>Settings</button>\n                <button className=\"button header-button\" onClick={runCode}>Run</button>\n                <div className=\"header-spacer\"></div>\n                <button className=\"button header-button\" onClick={() => setShowConsole(!showConsole)}>{showConsole ? 'Hide' : 'Show'} console</button>\n            </header>\n\n            <div className=\"tabs\">\n                {tabs.map((tab, index) => <Tab key={index} name={tab.fileName} onClick={() => tabs[index] && setCurrentTab(index)} close={() => closeTab(index)} isCurrent={currentTab === index} isLast={tabs.length > 1} modified={tab.modified} />)}\n            </div>\n\n            <section className=\"main-section\">\n                <div className=\"horizontal-main-section\">\n                    <Editor value={tabs[currentTab].code} onChange={(value) => updateCode(value)} language={tabs[currentTab].language} theme={editorTheme} />\n\n                    {showConsole && <div className=\"console\" style={{ color: error ? \"red\" : 'white' }}>\n                        <p className=\"console-text\">Output:</p>\n                        {output}\n                    </div>}\n                </div>\n\n                {showWebsitePreview && <div className=\"website-preview\">\n                    <iframe\n                        title=\"output\"\n                        srcDoc={srcDoc}\n                        ref={iframe}\n                        sandbox=\"allow-scripts\"\n                        frameBorder=\"0\"\n                        width=\"100%\"\n                        height=\"100%\"\n                    />\n                </div>}\n            </section>\n\n            <div className=\"status-bar\">\n                <p className=\"current-file\">{tabs[currentTab].fileName} {tabs[currentTab].fileName && '|'} {tabs[currentTab].fileType || 'Text file'}</p>\n                <div className=\"status-bar-spacer\"></div>\n                <button className=\"button toggle-iframe-button\" onClick={() => iframe.current.requestFullscreen()}>Go fullscreen</button>\n                <button className=\"button toggle-iframe-button\" onClick={() => setShowWebsitePreview(!showWebsitePreview)}>{showWebsitePreview ? 'Hide preview' : 'Show preview'}</button>\n            </div>\n\n            {help && <div className=\"black-overlay\">\n                <div className=\"help-modal\">\n                    <p className=\"help-modal-title\">Help</p>\n                    <CloseButton onClick={() => setHelp(false)} />\n\n                    <p className=\"help\">Just type your Javascript in the editor, and you will see the output in the panel to the right. When you're done with the code, you can choose a file name and download the script if you want to.</p>\n                </div>\n            </div>}\n\n            {settingsMenu && <div className=\"black-overlay\">\n                <div className=\"settings-menu\">\n                    <p className=\"settings-menu-title\">Settings</p>\n                    <CloseButton onClick={() => setSettingsMenu(false)} />\n\n                    <p className=\"setting-text\">Text size: {fontSize}</p>\n                    <input className=\"slider\" value={fontSize} onInput={(e) => setFontSize(e.target.value)} type=\"range\" min=\"15\" max=\"50\" />\n\n                    <p className=\"setting-text\">Editor theme: {editorTheme === 'material' ? 'Dark' : 'Light'}</p>\n                    <div className=\"select-container\">\n                        <select value={editorTheme} onChange={(e) => setEditorTheme(e.target.value)}>\n                            <option value=\"material\">Dark theme</option>\n                            <option value=\"default\">Light theme</option>\n                        </select>\n                        <i className=\"fas fa-chevron-down\"></i>\n                    </div>\n                </div>\n            </div>}\n        </div >\n    );\n}\n\nexport default App;\n","import React from 'react'\r\n\r\nexport default function Tab({ name, onClick, close, isCurrent, isLast, modified }) {\r\n    return (\r\n        <button className=\"tab\" onClick={onClick} style={{ background: isCurrent && 'var(--color)', borderBottom: modified && '4px solid rgb(219, 242, 5)' }}>\r\n            <p className=\"tab-name\">{name}</p>\r\n            {isLast && <button className=\"close-tab-button\" onClick={close}><i className=\"fas fa-times\"></i></button>}\r\n        </button>\r\n    )\r\n}\r\n","import React, { useRef } from 'react';\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/theme/material.css';\r\nimport 'codemirror/mode/xml/xml';\r\nimport 'codemirror/mode/css/css';\r\nimport 'codemirror/mode/javascript/javascript';\r\nimport { Controlled as ControlledEditor } from 'react-codemirror2';\r\n\r\nexport default function Editor({ value, onChange, language, theme }) {\r\n    const editor = useRef(null);\r\n\r\n    const handleChange = (editor, data, value) => {\r\n        onChange(value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"editor-container\">\r\n            <ControlledEditor\r\n                className=\"editor\"\r\n                value={value}\r\n                ref={editor}\r\n                onBeforeChange={handleChange}\r\n                options={{\r\n                    mode: language === 'text' ? null : language,\r\n                    theme: theme,\r\n                    lint: true,\r\n                    lineNumbers: language !== 'text',\r\n                    lineWrapping: true\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","// The \"name\" is displayed in the statusbar and such, \r\n// \"extension\" is used for getting the language of a new file \r\n// And \"language\" is used for the CodeMirror editor linting\r\n\r\nconst fileTypes = [\r\n    {\r\n        name: 'Text file',\r\n        extension: '.txt',\r\n        language: 'text'\r\n    },\r\n    {\r\n        name: 'HTML file',\r\n        extension: '.html',\r\n        language: 'xml'\r\n    },\r\n    {\r\n        name: 'CSS file',\r\n        extension: '.css',\r\n        language: 'css'\r\n    },\r\n    {\r\n        name: 'Javascript file',\r\n        extension: '.js',\r\n        language: 'javascript'\r\n    },\r\n];\r\n\r\nexport default fileTypes;","// These are the files that are accepted when you click the \"open file\" button\r\n\r\nconst openFileOptions = {\r\n    types: [ // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\r\n        {\r\n            description: 'Text files',\r\n            accept: {\r\n                'text/plain': ['.txt'],\r\n            },\r\n        },\r\n        {\r\n            description: 'HTML files',\r\n            accept: {\r\n                'text/html': ['.js'],\r\n            },\r\n        },\r\n        {\r\n            description: 'CSS files',\r\n            accept: {\r\n                'text/css': ['.js'],\r\n            },\r\n        },\r\n        {\r\n            description: 'Javascript files',\r\n            accept: {\r\n                'text/javascript': ['.js'],\r\n            },\r\n        },\r\n    ]\r\n};\r\n\r\nexport default openFileOptions;","const defaultPreview = `\r\n    <html>\r\n    <body><p>\r\n        You have to have an HTML file open for the website preview to work! \r\n        Click the \"File\" button in the navigation-bar and \"Save As\". \r\n        Then save it somewhere on your computer as an HTML file \r\n    </p></body>            \r\n    <style>\r\n        html, body\r\n        {\r\n            height: 100%;\r\n        }\r\n        \r\n        body\r\n        {\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n        }\r\n        \r\n        p\r\n        {\r\n            width: 50%;\r\n            font-size: 30px;\r\n            font-family: sans-serif;\r\n            text-align: center;\r\n        }\r\n    </style>\r\n    </html>\r\n`;\r\n\r\nexport default defaultPreview;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}